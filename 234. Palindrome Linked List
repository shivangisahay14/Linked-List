class Solution {
public:
     ListNode* middleNode(ListNode* head) {
        
        if(head==NULL or head->next==NULL) return head;
        
        ListNode *s=head,*f=head;
        while(f->next and f->next->next){
            s=s->next;
            f=f->next->next;
        }
        return s;      
        
    }
     ListNode* reverseList(ListNode* head) {
         if (head == NULL) 
            return NULL; 
        if (head->next == NULL) 
            return head; 
        
        ListNode *q=NULL;
        ListNode *r=NULL;
        ListNode *p=head;
        
        while(p!=NULL){
            r=q;
            q=p;
            p=p->next;
            q->next=r;
        }
        head=q;
        
        return q;        
    }
    bool isPalindrome(ListNode* head) {
        
        if(head==NULL or head->next==NULL) return true;
        
        ListNode *mid= middleNode(head);
        ListNode *newHead= mid->next;
        mid->next=NULL;
        
        newHead=reverseList(newHead);
        bool res=true;
        ListNode *c1=head,*c2=newHead;
        while(c2){
            if(c1->val!=c2->val){
                res=false; break;
            }
            
                c1=c1->next;
                c2=c2->next;
            
        }
        newHead=reverseList(newHead);
        mid->next=newHead;
        
        return res;
        
        
    }
};
