METHOD 1 (Using two loops) 
This is the simple way where two loops are used.
Outer loop is used to pick the elements one by one and the inner loop compares the picked element with the rest of the elements. 

void removeDuplicates(struct Node *start)
{
    struct Node *ptr1, *ptr2, *dup;
    ptr1 = start;
 
    /* Pick elements one by one */
    while (ptr1 != NULL && ptr1->next != NULL)
    {
        ptr2 = ptr1;
 
        /* Compare the picked element with rest
           of the elements */
        while (ptr2->next != NULL)
        {
            /* If duplicate then delete it */
            if (ptr1->data == ptr2->next->data)
            {
                /* sequence of steps is important here */
                dup = ptr2->next;
                ptr2->next = ptr2->next->next;
                delete(dup);
            }
            else /* This is tricky */
                ptr2 = ptr2->next;
        }
        ptr1 = ptr1->next;
    }
}
 
/* Function to print nodes in a given linked list */
void printList(struct Node *node)
{
    while (node != NULL)
    {
        printf("%d ", node->data);
        node = node->next;
    }
}
 METHOD 2 (Use Sorting) 
In general, Merge Sort is the best-suited sorting algorithm for sorting linked lists efficiently. 
1) Sort the elements using Merge Sort. We will soon be writing a post about sorting a linked list. O(nLogn) 
2) Remove duplicates in linear time using the algorithm for removing duplicates in sorted Linked List. O(n)

METHOD 3 (Use Hashing) 
Node * removeDuplicates( Node *head) 
    {
        if(!head) return NULL;
        if(!head->next) return head;
        
        unordered_set<int>s;
        
        Node *p=head,*prev=NULL;
        while(p){
            
            if(s.find(p->data)!= s.end()){
                Node *q=p->next;
                prev->next=p->next;
                delete p;
                p=q;
            }
            else{
                s.insert(p->data);
                prev=p;
                p=p->next;
                
            }
            
        }
        return head;      
        
    }
