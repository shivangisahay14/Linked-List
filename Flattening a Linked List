    Node* mergeTwoLL(Node* l1,Node *l2){
        if(!l1 or !l2) return !l1 ? l2 : l1;
        
        Node *c1=l1,*c2=l2;
        Node *dummy=new Node(0);
        Node *temp=dummy;
        
        while(c1 and c2){
        if(c1->data<c2->data){
            temp->bottom=c1;
            temp=temp->bottom;
            c1=c1->bottom;
        }
        else{
            temp->bottom=c2;
            temp=temp->bottom;
            c2=c2->bottom;
        }
        if(c1) {
            temp->bottom = c1;
        }
        else if(c2) {
            temp->bottom = c2;
        }
        
        }
        return dummy->bottom;
    }
    

/*  Function which returns the  root of 
    the flattened linked list. */
Node *flatten(Node *root)
{
    if(!root or !root->next) return root;
    
    root->next=flatten(root->next);
    
    root=mergeTwoLL(root,root->next);
    
    return root;
}
